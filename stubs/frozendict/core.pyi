from collections.abc import Iterator, Mapping
from typing import Any, TypeVar

_K = TypeVar("_K")
_V = TypeVar("_V")

# frozendict subclasses dict, but obviously isn't mutable - hence Mapping is a better fit for typing specificity.
class frozendict(Mapping[_K, _V]):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, key: _K) -> _V: ...
    def __iter__(self) -> Iterator[_K]: ...
    def __len__(self) -> int: ...
